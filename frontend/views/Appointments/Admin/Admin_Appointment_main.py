
# Form implementation generated from reading ui file 'mod_11.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget

import sys
import os
from .AdminAppointmentPage import AdminAppointmentPage_ui

class Admin_Appointment_Main(QWidget):
    
    def __init__(self, username, roles, primary_role, token, parent=None):
        super().__init__(parent)
        self.username = username
        self.roles = roles
        self.primary_role = primary_role
        self.token = token
        self.backIndexList = []
        self.backIndexList.append(0)
        self.currentPage = 0  # Initialize currentPage

        self.AppointmentPage = AdminAppointmentPage_ui(self.username, self.roles, self.primary_role, self.token)


        # Initialize the UI
        self.setupUi(self)
        
        print(f"Ui_MainWindow: Initialized for user {username} with role {primary_role}")

    def setupUi(self, MainWindow):
        # Since this is used as a widget, not a main window, we don't need to set up menu/status bars
        # Just set up the central content
        self._setupCentralWidget(MainWindow)
        
        # Set initial page
        self.stackedWidget.setCurrentIndex(0)

        # Initialize simple navigation and interaction
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def _setupCentralWidget(self, MainWindow):
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Main layout for central widget
        self.main_layout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.main_layout.setContentsMargins(10, 10, 10, 10)
        self.main_layout.setSpacing(0)
        self.main_layout.setObjectName("main_layout")
        
        self._setupStackedWidget()

    def _setupStackedWidget(self):
        self.widget = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget.setObjectName("widget")
        self.widget.setStyleSheet("""
            QWidget#widget {
                background-color: #f1f1f3; 
                border-bottom-left-radius: 10px;
                border-bottom-right-radius: 10px;
            }
        """)
        
        # Use QGridLayout for better control
        self.content_layout = QtWidgets.QGridLayout(self.widget)
        self.content_layout.setContentsMargins(10, 10, 10, 10)
        self.content_layout.setSpacing(0)
        self.content_layout.setObjectName("content_layout")
        
        # Stacked widget
        self.stackedWidget = QtWidgets.QStackedWidget()
        self.stackedWidget.setObjectName("stackedWidget")
        
        # Set expanding size policy
        self.stackedWidget.setSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding, 
            QtWidgets.QSizePolicy.Policy.Expanding
        )
        
        # Setup all pages
        self.stackedWidget.addWidget(self.AppointmentPage)
        
        # Add to grid layout with row and column stretch
        self.content_layout.addWidget(self.stackedWidget, 0, 0)
        self.content_layout.setRowStretch(0, 1)  # Row stretch
        self.content_layout.setColumnStretch(0, 1)  # Column stretch
        
        self.main_layout.addWidget(self.widget)


    def resizeEvent(self, event):
        """Handle window resize to ensure proper scaling"""
        super().resizeEvent(event)
        
        # Update all layouts
        self.updateGeometry()
        
        # Force layout recalculation
        self.centralwidget.updateGeometry()
        self.widget.updateGeometry()

        self.stackedWidget.updateGeometry()
        
        # Optional: Add debug output to see actual sizes
        print(f"Window size: {event.size().width()}x{event.size().height()}")
        print(f"Stacked widget size: {self.stackedWidget.width()}x{self.stackedWidget.height()}")
