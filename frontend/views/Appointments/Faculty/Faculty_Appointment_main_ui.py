# Form implementation generated from reading ui file 'mod_11.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget

from .AppointmentPage import AppointmentPage_ui 
from .AppointmentSchedulerPage import AppointmentSchedulerPage_ui
from .FacultyReschedulePage import FacultyReschedulePage_ui
from .FacultyEditSchedulePage import FacultyEditSchedulePage_ui

class Ui_MainWindow(QWidget):
    
    def __init__(self, username, roles, primary_role, token, parent=None):
        super().__init__(parent)
        self.username = username
        self.roles = roles
        self.primary_role = primary_role
        self.token = token
        self.backIndexList = []
        self.backIndexList.append(0)
        self.currentPage = 0  # Initialize currentPage

        # Set minimum size to ensure visibility
        self.setMinimumSize(800, 600)
        

        self.AppointmentPage = AppointmentPage_ui(self.username, self.roles, self.primary_role, self.token)
        self.AppointmentSchedulerPage = AppointmentSchedulerPage_ui(self.username, self.roles, self.primary_role, self.token)
        self.FacultyReschedulePage = FacultyReschedulePage_ui(self.username, self.roles, self.primary_role, self.token)
        self.FacultyEditSchedulePage = FacultyEditSchedulePage_ui(self.username,self.roles,self.primary_role,self.token)

        #connection

        self.AppointmentPage.go_to_AppointmentSchedulerPage.connect(self.changetoAppointmentScheduler)
        self.AppointmentPage.go_to_AppointmentReschedulePage.connect(self.changetoReschedule)
        self.AppointmentSchedulerPage.go_to_EditSchedulePage.connect(self.changetoEditschedule)
        self.AppointmentSchedulerPage.back.connect(self.backclicked)
        self.FacultyEditSchedulePage.back.connect(self.backclicked)
        self.FacultyReschedulePage.back.connect(self.backclicked)
        
        # Initialize the UI
        self.setupUi(self)
        
        print(f"Ui_MainWindow: Initialized for user {username} with role {primary_role}")

    def setupUi(self, MainWindow):
        # Since this is used as a widget, not a main window, we don't need to set up menu/status bars
        # Just set up the central content
        self._setupCentralWidget(MainWindow)
        
        # Set initial page
        self.stackedWidget.setCurrentIndex(0)

        # Initialize simple navigation and interaction
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def _setupCentralWidget(self, MainWindow):
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Main layout for central widget
        self.main_layout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        self.main_layout.setObjectName("main_layout")
        
        # Setup all UI components
        # self._setupSidebar()
        # self._setupMainContent()
        self._setupBackButton()
        
        # Apply responsive layout
        self._setupResponsiveLayout()
        # self._configureTables()
        
        # MainWindow.setCentralWidget(self.centralwidget)
        self._setupStackedWidget()

    # def _setupSidebar(self):
    #     # Main sidebar frame
    #     self.frame = QtWidgets.QFrame(parent=self.centralwidget)
    #     self.frame.setMinimumWidth(280)
    #     self.frame.setMaximumWidth(320)
    #     self.frame.setStyleSheet("QFrame { background-color: #084924; }")
    #     self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
    #     self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
    #     self.frame.setObjectName("frame")
        
    #     # Sidebar layout
    #     self.sidebar_layout = QtWidgets.QVBoxLayout(self.frame)
    #     self.sidebar_layout.setContentsMargins(0, 0, 0, 0)
    #     self.sidebar_layout.setSpacing(0)
    #     self.sidebar_layout.setObjectName("sidebar_layout")
        
    #     # Top yellow frame
    #     self.frame_2 = QtWidgets.QFrame(parent=self.frame)
    #     self.frame_2.setMinimumHeight(111)
    #     self.frame_2.setMaximumHeight(111)
    #     self.frame_2.setStyleSheet("QFrame { background-color: #ffc000; }")
    #     self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
    #     self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
    #     self.frame_2.setObjectName("frame_2")
        
    #     # Virtual Hub label in top frame
    #     self.VirtualHub = QtWidgets.QLabel(parent=self.frame_2)
    #     self.VirtualHub.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
    #     font = QtGui.QFont()
    #     font.setFamily("Poppins")
    #     font.setPointSize(24)
    #     font.setBold(True)
    #     font.setWeight(75)
    #     self.VirtualHub.setFont(font)
    #     self.VirtualHub.setStyleSheet("QLabel { color: white; background-color: transparent; padding: 20px; }")
    #     self.VirtualHub.setObjectName("VirtualHub")
        
    #     # Navbar icon
    #     self.label_2 = QtWidgets.QLabel(parent=self.frame_2)
    #     self.label_2.setFixedSize(31, 21)
    #     self.label_2.setText("")
    #     self.label_2.setPixmap(QtGui.QPixmap(":/assets/navbar_icon.png"))
    #     self.label_2.setScaledContents(True)
    #     self.label_2.setObjectName("label_2")
        
    #     # Layout for top frame
    #     top_frame_layout = QtWidgets.QHBoxLayout(self.frame_2)
    #     top_frame_layout.setContentsMargins(20, 40, 20, 40)
    #     top_frame_layout.addWidget(self.label_2)
    #     top_frame_layout.addWidget(self.VirtualHub, 1)
        
    #     # Scroll area for sidebar content
    #     self.sidebar_scroll = QtWidgets.QScrollArea(parent=self.frame)
    #     self.sidebar_scroll.setWidgetResizable(True)
    #     self.sidebar_scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAsNeeded)
    #     self.sidebar_scroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
    #     self.sidebar_scroll.setStyleSheet("QScrollArea { border: none; background: transparent; }")
    #     self.sidebar_scroll.setObjectName("sidebar_scroll")
        
    #     # Scroll content widget
    #     self.sidebar_content = QtWidgets.QWidget()
    #     self.sidebar_content.setObjectName("sidebar_content")
    #     self.sidebar_content.setStyleSheet("QWidget { background: transparent; }")
        
    #     # Main layout for sidebar content
    #     self.sidebar_content_layout = QtWidgets.QVBoxLayout(self.sidebar_content)
    #     self.sidebar_content_layout.setContentsMargins(20, 10, 20, 20)
    #     self.sidebar_content_layout.setSpacing(8)
    #     self.sidebar_content_layout.setObjectName("sidebar_content_layout")
        
    #     # Setup sidebar menu items
    #     self._setupSidebarMenuItems()
        
    #     self.sidebar_scroll.setWidget(self.sidebar_content)
        
    #     # Add widgets to sidebar layout
    #     self.sidebar_layout.addWidget(self.frame_2)
    #     self.sidebar_layout.addWidget(self.sidebar_scroll, 1)
        
    #     # Add sidebar to main layout
    #     self.main_layout.addWidget(self.frame)

    # def _setupSidebarMenuItems(self):
    #     # Menu items data: (name, text, has_icon, has_dropdown, is_highlighted)
    #     menu_items = [
    #         ("Dashboard", "Dashboard", True, False, False),
    #         ("Academics", "Academics", True, True, False),
    #         ("Classes", "Classes", True, False, False),
    #         ("Schedule", "Schedule", True, False, False),
    #         ("Progress", "Progress", True, False, False),
    #         ("Appointments", "Appointments", True, False, True),  # Highlighted
    #         ("OrganizationsSubheading", "Organizations", True, True, False),
    #         ("Organization", "Organization", True, False, False),
    #         ("Events", "Events", True, False, False),
    #         ("Campus", "Campus", True, False, False),
    #         ("Calendar", "Calendar", True, False, False),
    #         ("Announcement", "Announcement", True, False, False),
    #         ("HouseSystem", "House System", True, False, False),
    #         ("Showcase", "Showcase", True, False, False),
    #         ("Services", "Services", True, False, False),
    #         ("Documents", "Documents", True, False, False),
    #         ("StudentService", "Student Service", True, False, False),
    #         ("Messages", "Messages", True, False, False),
    #     ]
        
    #     for name, text, has_icon, has_dropdown, is_highlighted in menu_items:
    #         menu_item = self._createMenuItem(name, text, has_icon, has_dropdown, is_highlighted)
    #         self.sidebar_content_layout.addWidget(menu_item)

    # def _createMenuItem(self, name, text, has_icon, has_dropdown, is_highlighted):
    #     # Create container widget for menu item
    #     item_widget = QtWidgets.QWidget()
    #     item_widget.setObjectName(f"{name}_widget")
    #     item_widget.setMinimumHeight(40)
    #     item_widget.setMaximumHeight(50)
        
    #     # Layout for menu item
    #     item_layout = QtWidgets.QHBoxLayout(item_widget)
    #     item_layout.setContentsMargins(10, 5, 10, 5)
    #     item_layout.setSpacing(10)
        
    #     # Icon label
    #     icon_label = QtWidgets.QLabel()
    #     icon_label.setFixedSize(24, 24)
    #     icon_label.setObjectName(f"{name}_icon")
    #     if has_icon:
    #         # Set appropriate icon based on menu item
    #         icon_path = self._getIconPath(name)
    #         if icon_path:
    #             icon_label.setPixmap(QtGui.QPixmap(icon_path))
    #     icon_label.setStyleSheet("QLabel { background-color: transparent; }")
        
    #     # Text label
    #     text_label = QtWidgets.QLabel(text)
    #     text_label.setObjectName(name)
    #     font = QtGui.QFont()
    #     font.setFamily("Poppins")
    #     font.setPointSize(12)
    #     text_label.setFont(font)
    #     text_label.setStyleSheet("QLabel { color: white; background-color: transparent; }")
        
    #     # Dropdown icon
    #     dropdown_label = QtWidgets.QLabel()
    #     dropdown_label.setFixedSize(16, 16)
    #     dropdown_label.setObjectName(f"{name}_dropdown")
    #     if has_dropdown:
    #         dropdown_label.setPixmap(QtGui.QPixmap(":/assets/dropdown_icon.png"))
    #     dropdown_label.setStyleSheet("QLabel { background-color: transparent; }")
        
    #     # Add widgets to layout
    #     item_layout.addWidget(icon_label)
    #     item_layout.addWidget(text_label, 1)
    #     if has_dropdown:
    #         item_layout.addWidget(dropdown_label)
        
    #     # Apply highlight style if needed
    #     if is_highlighted:
    #         item_widget.setStyleSheet("QWidget { background-color: #ffc000; border-top-left-radius: 10px; border-bottom-left-radius: 10px; }")
    #         text_label.setStyleSheet("QLabel { color: #084924; font-weight: bold; background-color: transparent; }")
        
    #     return item_widget

    # def _getIconPath(self, menu_name):
    #     # Map menu names to icon paths
    #     icon_map = {
    #         "Dashboard": ":/assets/dashboard_icon.png",
    #         "Classes": ":/assets/classes_icon.png",
    #         "Schedule": ":/assets/Schedule_icon.png",
    #         "Progress": ":/assets/progress_icon.png",
    #         "Appointments": ":/assets/appointments_icon.png",
    #         "Organization": ":/assets/org_icon.png",
    #         "Events": ":/assets/events_icon.png",
    #         "Campus": ":/assets/campus_icon.png",
    #         "Calendar": ":/assets/appointments_icon.png",
    #         "Announcement": ":/assets/mic_icon.png",
    #         "HouseSystem": ":/assets/mic_icon.png",
    #         "Showcase": ":/assets/mic_icon.png",
    #         "Services": ":/assets/services_icon.png",
    #         "Documents": ":/assets/doc_icon.png",
    #         "StudentService": ":/assets/studservice_icon.png",
    #         "Messages": ":/assets/messages_icon.png",
    #     }
    #     return icon_map.get(menu_name, "")

    # # def _setupMainContent(self):
    # #     # Main content widget
    # #     self.widget = QtWidgets.QWidget(parent=self.centralwidget)
    # #     self.widget.setObjectName("widget")
    # #     self.widget.setStyleSheet("""
    # #         QWidget#widget {
    # #             background-color: #f1f1f3; 
    # #             border-bottom-left-radius: 10px;
    # #             border-bottom-right-radius: 10px;
    # #         }
    # #     """)
        
    # #     # Main vertical layout for content
    # #     self.content_layout = QtWidgets.QVBoxLayout(self.widget)
    # #     self.content_layout.setContentsMargins(0, 0, 0, 0)
    # #     self.content_layout.setSpacing(0)
    # #     self.content_layout.setObjectName("content_layout")
        
    # #     # Setup top bar and stacked widget
    # #     self._setupTopBar()
    # #     self._setupStackedWidget()
        
    # #     # Add main content to main layout
    # #     self.main_layout.addWidget(self.widget, 1)

    # def _setupTopBar(self):
    #     # Top bar frame
    #     self.frame_3 = QtWidgets.QFrame(parent=self.widget)
    #     self.frame_3.setMinimumHeight(80)
    #     self.frame_3.setMaximumHeight(100)
    #     self.frame_3.setStyleSheet("""
    #         QFrame {
    #             background-color: #FFFFFF; 
    #             border-bottom-left-radius: 20px;
    #             border-bottom-right-radius: 20px;
    #         }
    #     """)
    #     self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
    #     self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
    #     self.frame_3.setObjectName("frame_3")
        
    #     # Top bar layout
    #     topbar_layout = QtWidgets.QHBoxLayout(self.frame_3)
    #     topbar_layout.setContentsMargins(30, 10, 30, 10)
    #     topbar_layout.setSpacing(20)
    #     topbar_layout.setObjectName("topbar_layout")
        
    #     # Logo and college info
    #     info_widget = QtWidgets.QWidget()
    #     info_layout = QtWidgets.QHBoxLayout(info_widget)
    #     info_layout.setContentsMargins(0, 0, 0, 0)
    #     info_layout.setSpacing(15)
        
    #     # Logo
    #     self.label = QtWidgets.QLabel()
    #     self.label.setFixedSize(40, 40)
    #     self.label.setText("")
    #     self.label.setPixmap(QtGui.QPixmap(":/assets/cisc_logo.png"))
    #     self.label.setScaledContents(True)
    #     self.label.setObjectName("label")
        
    #     # College info
    #     college_info_widget = QtWidgets.QWidget()
    #     college_layout = QtWidgets.QVBoxLayout(college_info_widget)
    #     college_layout.setContentsMargins(0, 0, 0, 0)
    #     college_layout.setSpacing(2)
        
    #     self.Classes_2 = QtWidgets.QLabel()
    #     font = QtGui.QFont()
    #     font.setFamily("Poppins")
    #     font.setPointSize(14)
    #     font.setBold(True)
    #     self.Classes_2.setFont(font)
    #     self.Classes_2.setStyleSheet("QLabel { color: #3b3b3b; background-color: transparent; }")
    #     self.Classes_2.setObjectName("Classes_2")
        
    #     self.Classes_3 = QtWidgets.QLabel()
    #     font = QtGui.QFont()
    #     font.setFamily("Poppins")
    #     font.setPointSize(12)
    #     self.Classes_3.setFont(font)
    #     self.Classes_3.setStyleSheet("QLabel { color: #3b3b3b; background: transparent; }")
    #     self.Classes_3.setObjectName("Classes_3")
        
    #     college_layout.addWidget(self.Classes_2)
    #     college_layout.addWidget(self.Classes_3)
        
    #     info_layout.addWidget(self.label)
    #     info_layout.addWidget(college_info_widget)
        
    #     # Spacer
    #     topbar_layout.addWidget(info_widget)
    #     topbar_layout.addStretch(1)
        
    #     # Icons section
    #     icons_widget = QtWidgets.QWidget()
    #     icons_layout = QtWidgets.QHBoxLayout(icons_widget)
    #     icons_layout.setContentsMargins(0, 0, 0, 0)
    #     icons_layout.setSpacing(15)
        
    #     # Email icon
    #     self.label_10 = QtWidgets.QLabel()
    #     self.label_10.setFixedSize(40, 40)
    #     self.label_10.setText("")
    #     self.label_10.setPixmap(QtGui.QPixmap(":/assets/email_box.png"))
    #     self.label_10.setScaledContents(True)
    #     self.label_10.setObjectName("label_10")
        
    #     # Separator
    #     self.label_27 = QtWidgets.QLabel()
    #     self.label_27.setFixedSize(2, 40)
    #     self.label_27.setText("")
    #     self.label_27.setPixmap(QtGui.QPixmap(":/assets/line.png"))
    #     self.label_27.setScaledContents(True)
    #     self.label_27.setObjectName("label_27")
        
    #     # Notification icon
    #     self.label_9 = QtWidgets.QLabel()
    #     self.label_9.setFixedSize(30, 30)
    #     self.label_9.setText("")
    #     self.label_9.setPixmap(QtGui.QPixmap(":/assets/notification.png"))
    #     self.label_9.setScaledContents(True)
    #     self.label_9.setObjectName("label_9")
        
    #     # Separator
    #     self.label_28 = QtWidgets.QLabel()
    #     self.label_28.setFixedSize(2, 40)
    #     self.label_28.setText("")
    #     self.label_28.setPixmap(QtGui.QPixmap(":/assets/line.png"))
    #     self.label_28.setScaledContents(True)
    #     self.label_28.setObjectName("label_28")
        
    #     # Profile icon
    #     self.label_8 = QtWidgets.QLabel()
    #     self.label_8.setFixedSize(50, 50)
    #     self.label_8.setText("")
    #     self.label_8.setPixmap(QtGui.QPixmap(":/assets/Profile.png"))
    #     self.label_8.setScaledContents(True)
    #     self.label_8.setObjectName("label_8")
        
    #     icons_layout.addWidget(self.label_10)
    #     icons_layout.addWidget(self.label_27)
    #     icons_layout.addWidget(self.label_9)
    #     icons_layout.addWidget(self.label_28)
    #     icons_layout.addWidget(self.label_8)
        
    #     topbar_layout.addWidget(icons_widget)
        
    #     # Add top bar to content layout
    #     self.content_layout.addWidget(self.frame_3)

    def _setupStackedWidget(self):
        self.widget = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget.setObjectName("widget")
        self.widget.setStyleSheet("""
            QWidget#widget {
                background-color: #f1f1f3; 
                border-bottom-left-radius: 10px;
                border-bottom-right-radius: 10px;
            }
        """)

        self.content_layout = QtWidgets.QVBoxLayout(self.widget)
        self.content_layout.setContentsMargins(0, 0, 0, 0)
        self.content_layout.setSpacing(0)
        self.content_layout.setObjectName("content_layout")
        # Stacked widget container
        self.stacked_container = QtWidgets.QWidget()
        self.stacked_container.setObjectName("stacked_container")
        
        stacked_layout = QtWidgets.QVBoxLayout(self.stacked_container)
        stacked_layout.setContentsMargins(20, 10, 20, 20)
        stacked_layout.setSpacing(0)
        stacked_layout.setObjectName("stacked_layout")
        
        # Main stacked widget
        self.stackedWidget = QtWidgets.QStackedWidget()
        self.stackedWidget.setObjectName("stackedWidget")
        
        # Setup all pages
        
        
        
        
        self.stackedWidget.addWidget(self.AppointmentPage)
        self.stackedWidget.addWidget(self.AppointmentSchedulerPage)
        self.stackedWidget.addWidget(self.FacultyReschedulePage)
        self.stackedWidget.addWidget(self.FacultyEditSchedulePage)
        stacked_layout.addWidget(self.stackedWidget)
        
        # Add to main content layout
        self.content_layout.addWidget(self.stacked_container, 1)
        self.main_layout.addWidget(self.widget, 1)

    
    
    

    

    def _setupBackButton(self):
        # Back button (using QPushButton for click support)
        self.backButton_9 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.backButton_9.setFixedSize(40, 40)
        self.backButton_9.setStyleSheet("border: none; background: transparent;")
        self.backButton_9.setIcon(QtGui.QIcon(":/assets/back_button.png"))
        self.backButton_9.setIconSize(QtCore.QSize(40, 40))
        self.backButton_9.setObjectName("backButton_9")

        # Connect back button to navigation
        self.backButton_9.clicked.connect(self.goBackPage)
    def goBackPage(self):
        if self.currentPage > 0:
            self.currentPage -= 1
            self.stackedWidget.setCurrentIndex(self.currentPage)

    def _setupResponsiveLayout(self):
        # Layouts are now properly configured in the setup methods
        pass

    # def _configureTables(self):
    #     # Make tables adjust to available width
    #     try:
    #         header = self.tableWidget_8.horizontalHeader()
    #         header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #         header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.Stretch)
    #         header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #         header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #         header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #         header.setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #     except Exception:
    #         pass

    def _setupMenuAndStatusBar(self, MainWindow):
        # Menu and status bars are not needed for widgets embedded in the router
        pass
        

    
    def changetoEditschedule(self):
        self.stackedWidget.setCurrentIndex(3)
        self.backIndexList.append(3)
        
    def changetoReschedule(self):
        self.stackedWidget.setCurrentIndex(2)
        self.backIndexList.append(2)
        

    def changetoAppointmentScheduler(self):
        self.stackedWidget.setCurrentIndex(1)
        self.backIndexList.append(1)
        
    def backclicked(self):
        if len(self.backIndexList) >1:
            self.backIndexList.pop()
        lastIndex = self.backIndexList[-1] if self.backIndexList else 0
        self.stackedWidget.setCurrentIndex(lastIndex)