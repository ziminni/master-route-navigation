# Form implementation generated from reading ui file 'mod_11.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget

from .AppointmentPage import AppointmentPage_ui 
from .AppointmentSchedulerPage import AppointmentSchedulerPage_ui
from .FacultyReschedulePage import FacultyReschedulePage_ui
from .FacultyEditSchedulePage import FacultyEditSchedulePage_ui

class Ui_MainWindow(QWidget):
    
    def __init__(self, username, roles, primary_role, token, parent=None):
        super().__init__(parent)
        self.username = username
        self.roles = roles
        self.primary_role = primary_role
        self.token = token
        self.backIndexList = []
        self.backIndexList.append(0)
        self.currentPage = 0  # Initialize currentPage

        # Set minimum size to ensure visibility
        self.setMinimumSize(800, 600)
        

        self.AppointmentPage = AppointmentPage_ui(self.username, self.roles, self.primary_role, self.token)
        self.AppointmentSchedulerPage = AppointmentSchedulerPage_ui(self.username, self.roles, self.primary_role, self.token)
        self.FacultyReschedulePage = FacultyReschedulePage_ui(self.username, self.roles, self.primary_role, self.token, 1)
        self.FacultyEditSchedulePage = FacultyEditSchedulePage_ui(self.username,self.roles,self.primary_role,self.token)

        #connection

        self.AppointmentPage.go_to_AppointmentSchedulerPage.connect(self.changetoAppointmentScheduler)
        self.AppointmentPage.go_to_AppointmentReschedulePage.connect(self.changetoReschedule)
        self.AppointmentSchedulerPage.go_to_EditSchedulePage.connect(self.changetoEditschedule)
        self.AppointmentSchedulerPage.back.connect(self.backclicked)
        self.FacultyEditSchedulePage.back.connect(self.backclicked)
        self.FacultyReschedulePage.back.connect(self.backclicked)
        
        # Initialize the UI
        self.setupUi(self)
        
        print(f"Ui_MainWindow: Initialized for user {username} with role {primary_role}")

    def setupUi(self, MainWindow):
        # Since this is used as a widget, not a main window, we don't need to set up menu/status bars
        # Just set up the central content
        self._setupCentralWidget(MainWindow)
        
        # Set initial page
        self.stackedWidget.setCurrentIndex(0)

        # Initialize simple navigation and interaction
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def _setupCentralWidget(self, MainWindow):
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Main layout for central widget
        self.main_layout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        self.main_layout.setObjectName("main_layout")
        
        # Setup all UI components
        # self._setupSidebar()
        # self._setupMainContent()
        self._setupBackButton()
        
        # Apply responsive layout
        self._setupResponsiveLayout()
        # self._configureTables()
        
        # MainWindow.setCentralWidget(self.centralwidget)
        self._setupStackedWidget()

    

    def _setupStackedWidget(self):
        self.widget = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget.setObjectName("widget")
        self.widget.setStyleSheet("""
            QWidget#widget {
                background-color: #f1f1f3; 
                border-bottom-left-radius: 10px;
                border-bottom-right-radius: 10px;
            }
        """)

        self.content_layout = QtWidgets.QVBoxLayout(self.widget)
        self.content_layout.setContentsMargins(0, 0, 0, 0)
        self.content_layout.setSpacing(0)
        self.content_layout.setObjectName("content_layout")
        # Stacked widget container
        self.stacked_container = QtWidgets.QWidget()
        self.stacked_container.setObjectName("stacked_container")
        
        stacked_layout = QtWidgets.QVBoxLayout(self.stacked_container)
        stacked_layout.setContentsMargins(20, 10, 20, 20)
        stacked_layout.setSpacing(0)
        stacked_layout.setObjectName("stacked_layout")
        
        # Main stacked widget
        self.stackedWidget = QtWidgets.QStackedWidget()
        self.stackedWidget.setObjectName("stackedWidget")
        
        # Setup all pages
        
        
        
        
        self.stackedWidget.addWidget(self.AppointmentPage)
        self.stackedWidget.addWidget(self.AppointmentSchedulerPage)
        self.stackedWidget.addWidget(self.FacultyReschedulePage)
        self.stackedWidget.addWidget(self.FacultyEditSchedulePage)
        stacked_layout.addWidget(self.stackedWidget)
        
        # Add to main content layout
        self.content_layout.addWidget(self.stacked_container, 1)
        self.main_layout.addWidget(self.widget, 1)

    
    
    

    

    def _setupBackButton(self):
        # Back button (using QPushButton for click support)
        self.backButton_9 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.backButton_9.setFixedSize(40, 40)
        self.backButton_9.setStyleSheet("border: none; background: transparent;")
        self.backButton_9.setIcon(QtGui.QIcon(":/assets/back_button.png"))
        self.backButton_9.setIconSize(QtCore.QSize(40, 40))
        self.backButton_9.setObjectName("backButton_9")

        # Connect back button to navigation
        self.backButton_9.clicked.connect(self.goBackPage)
    def goBackPage(self):
        if self.currentPage > 0:
            self.currentPage -= 1
            self.stackedWidget.setCurrentIndex(self.currentPage)

    def _setupResponsiveLayout(self):
        # Layouts are now properly configured in the setup methods
        pass

    # def _configureTables(self):
    #     # Make tables adjust to available width
    #     try:
    #         header = self.tableWidget_8.horizontalHeader()
    #         header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #         header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.Stretch)
    #         header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #         header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #         header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #         header.setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
    #     except Exception:
    #         pass

    def _setupMenuAndStatusBar(self, MainWindow):
        # Menu and status bars are not needed for widgets embedded in the router
        pass
        

    
    def changetoEditschedule(self):
        self.stackedWidget.setCurrentIndex(3)
        self.backIndexList.append(3)
        
    def changetoReschedule(self):
        self.stackedWidget.setCurrentIndex(2)
        self.backIndexList.append(2)
        

    def changetoAppointmentScheduler(self):
        self.stackedWidget.setCurrentIndex(1)
        self.backIndexList.append(1)
        
    def backclicked(self):
        if len(self.backIndexList) >1:
            self.backIndexList.pop()
        lastIndex = self.backIndexList[-1] if self.backIndexList else 0
        self.stackedWidget.setCurrentIndex(lastIndex)